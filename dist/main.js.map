{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,aAAa;AACxB,WAAW,KAAK;AAChB,WAAW,UAAU;AACrB,WAAW,SAAS;AACpB,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACkC;AACpB;;;;;;;;;;;;;;;ACpBd;AACA;AACuC;AACvC;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,YAAY,gDAAO;AACnB;AACA;AACA,SAAS;AACT;AACA,uCAAuC;AACvC;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA,0BAA0B;AAC1B;AACA;AACA,YAAY,gDAAO;AACnB;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA,+BAA+B,EAAE,OAAO,EAAE;AAC1C;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA,mCAAmC;AACnC;AACA;AACA,iCAAiC;AACjC,SAAS;AACT,KAAK;AACL;AACA;AACA,eAAe,eAAe,GAAG,GAAG;AACpC,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA,0BAA0B,UAAU,eAAe,GAAG,GAAG;AACzD;AACA,sCAAsC,EAAE,OAAO,EAAE;AACjD,gBAAgB,gDAAO;AACvB,0BAA0B;AAC1B,yDAAyD;AACzD,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,GAAG;AACtB,mBAAmB,GAAG;AACtB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB,GAAG;AACtB,mBAAmB,GAAG;AACtB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB,GAAG;AACtB,mBAAmB,GAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC3IA;AAC+C;AAC/C;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oBAAoB,OAAO;AAC7C;AACA,yCAAyC;AACzC;AACA,oDAAoD;AACpD;AACA;AACA,gBAAgB,wDAAW;AAC3B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA,eAAe,EAAE,OAAO,EAAE;AAC1B,mCAAmC;AACnC;AACA,YAAY,wDAAW,iCAAiC,IAAI,GAAG,GAAG;AAClE;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACmB;;;;;;;;;;;;;;;;AClHnB;AACA;AACA;AACA;AACA;AACe;AACf;AACA,uBAAuB;AACvB;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACvBA;AAC+B;AAC/B;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,QAAQ,cAAc;AAC9B,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA,6BAA6B;AAC7B,sBAAsB,wCAAG;AACzB;AACA;AACA;AACA;AACA,gBAAgB,wCAAG,sBAAsB,wCAAG;AAC5C;AACA,aAAa;AACb;AACA,mBAAmB,QAAQ,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACmB;;;;;;;;;;;;;;;;;AClDnB;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACyC;AACA;AACzC;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kDAAQ;AACxB;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B,uCAAuC;AACvC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,gBAAgB,kDAAQ;AACxB;AACA;AACA;AACA;AACA,eAAe,GAAG,MAAM,QAAQ;AAChC;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,+BAA+B;AAC/B;AACA;AACA,aAAa;AACb;AACA;AACA;AACc;;;;;;;;;;;;;;;;;ACxEd;AAC+C;AAChB;AAC/B;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,eAAe;AAC1B;AACA;AACA,oBAAoB,wDAAW;AAC/B,QAAQ,wCAAG,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wDAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACkB;;;;;;UCtClB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACNoD","sources":["webpack:///../node_modules/qvm-mvvm/Qvm.js","webpack:///../node_modules/qvm-mvvm/core/CompileUtil.js","webpack:///../node_modules/qvm-mvvm/core/Compiler.js","webpack:///../node_modules/qvm-mvvm/core/Dep.js","webpack:///../node_modules/qvm-mvvm/core/Observer.js","webpack:///../node_modules/qvm-mvvm/core/Qvm.js","webpack:///../node_modules/qvm-mvvm/core/Watcher.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./index.js"],"sourcesContent":["//导入js\r\n\r\n//start以下是错误的加载\r\n// import {Compiler} from '@/Compiler.js';\r\n// import {CompileUtil} from '@/CompileUtil.js';\r\n// import {Dep} from '@/Dep.js';\r\n// import {Observer} from '@/Observer.js';\r\n// import {Watcher} from '@/Watcher.js';\r\n// import {QVM} from '@/QVM.js';\r\n\r\n\r\n\r\n// import './Compiler.js';\r\n// import './CompileUtil.js';\r\n// import './Dep.js';\r\n// import './Observer.js';\r\n// import './Watcher.js';\r\n// import './QVM.js';\r\n//end\r\nimport {Qvm} from './core/Qvm.js';\r\nexport { Qvm } ","\r\n\r\nimport { Watcher } from './Watcher.js';\r\n//编译功能方法\r\nexport const CompileUtil = {\r\n    //根据表达式取到对应的数据\r\n    getVal(vm, expr) {\r\n        //vm.$data,'school.name',[school,name]\r\n        //reduce，data是函数执行后的返回值\r\n        return expr.split('.').reduce((data, current) => {\r\n            return data[current];\r\n        }, vm.$data);\r\n\r\n    },\r\n    setValue(vm, expr, value) {\r\n        //vm.$data 'school.name'=>mumu\r\n        return expr.split('.').reduce((data, current, index, arr) => {\r\n            if (index == arr.length - 1) {\r\n                return data[current] = value;\r\n            }\r\n            return data[current];\r\n        }, vm.$data);\r\n\r\n    },\r\n    /**\r\n     * 解析v-model这个指令\r\n     * node是节点，expr是表达式，vm是当前实例\r\n     * @param {*} node \r\n     * @param {*} expr \r\n     * @param {*} vm \r\n     */\r\n    model(node, expr, vm) {//node是节点，expr是表达式，vm是当前实例\r\n        //school.name vm.$data\r\n        //个输入框赋予value属性 node.value=xxx\r\n        let fn = this.updater['modelUpdater'];\r\n        new Watcher(vm, expr, (newVal) => {\r\n            //给输入框加一个观察者，如果稍后数据更新了会触发此方法，会拿新值给输入框赋值\r\n            fn(node, newVal);\r\n        });\r\n        node.addEventListener('input', (e) => {\r\n            let value = e.target.value;//获取用户输入的内容\r\n            this.setValue(vm, expr, value);\r\n        })\r\n        let value = this.getVal(vm, expr);\r\n        fn(node, value);\r\n    },\r\n    /**\r\n     * 给页面html添加数据监控Watcher，动态修改页面数据\r\n     * v-html=\"message\"\r\n     * @param {*} node \r\n     * @param {*} expr \r\n     * @param {*} vm \r\n     */\r\n    html(node, expr, vm) {//v-html=\"message\"\r\n        //node.innerHTML=xxxx\r\n        let fn = this.updater['htmlUpdater'];\r\n        new Watcher(vm, expr, (newVal) => {\r\n            //给加一个观察者，如果稍后数据更新了会触发此方法，会拿新值给输入框赋值\r\n            fn(node, newVal);\r\n        });\r\n        let value = this.getVal(vm, expr);\r\n        fn(node, value);\r\n    },\r\n    /**\r\n     * 获取内容的值，数据变更后的值\r\n     * @param {*} vm \r\n     * @param {*} expr \r\n     * @returns \r\n     */\r\n    getContentValue(vm, expr) {\r\n        //遍历表达式，重新替换成与个完整的内容，返还回去\r\n        return expr.replace(/\\{\\{(.+?)\\}\\}/g, (...args) => {\r\n            return this.getVal(vm, args[1]);\r\n        });\r\n\r\n    },\r\n    /**\r\n     * 添加on事件如 v-on:click=\"change\" \r\n     * @param {*} node  \r\n     * @param {*} expr \r\n     * @param {*} vm \r\n     * @param {*} eventName \r\n     */\r\n    on(node, expr, vm, eventName) {//v-on:click=\"change\" ,expr\r\n        node.addEventListener(eventName, (e) => {\r\n            //动态调用变量只能使用vm.[expr]\r\n            vm[expr].call(vm, e);//this.change\r\n        });\r\n    },\r\n    /**\r\n     * 给页面text添加数据监控Watcher，动态修改页面数据\r\n     * expr=>{{school.name}}{{a}},{{b}}\r\n     * @param {*} node \r\n     * @param {*} expr \r\n     * @param {*} vm \r\n     */\r\n    text(node, expr, vm) {//expr=>{{school.name}}{{a}},{{b}}\r\n        let fn = this.updater['textUpdater'];\r\n        let content = expr.replace(/\\{\\{(.+?)\\}\\}/g, (...args) => {\r\n            new Watcher(vm, args[1], (newVal) => {\r\n                //给表达式{{}}都加一个观察者\r\n                fn(node, this.getContentValue(vm, expr));//返回一个全的字符串\r\n            });\r\n            return this.getVal(vm, args[1]);\r\n        });\r\n        fn(node, content);\r\n    },\r\n    /**\r\n     * 把数据插入到节点\r\n     */\r\n    updater: {\r\n        /**\r\n         * 修改属性的值\r\n         * @param {*} node \r\n         * @param {*} value \r\n         */\r\n        modelUpdater(node, value) {\r\n            //修改属性的值\r\n            node.value = value;\r\n        },\r\n        /**\r\n         * 修改节点html内容\r\n         * @param {*} node \r\n         * @param {*} value \r\n         */\r\n        htmlUpdater(node, value) {\r\n            //修改html的内容\r\n            node.innerHTML = value;\r\n        },\r\n        /**\r\n         * 修改节点文本内容\r\n         * @param {*} node \r\n         * @param {*} value \r\n         */\r\n        textUpdater(node, value) {\r\n            //修改节点的文本内容\r\n            node.textContent = value;\r\n        }\r\n    }\r\n}\r\n","\r\nimport { CompileUtil } from './CompileUtil.js';\r\n\r\n//编译模板\r\nexport default class Compiler {\r\n    constructor(el, vm) {\r\n        //判断el属性，是不是一个元素，如果不是元素，那就获取\r\n        this.el = this.isElementNode(el) ? el : document.querySelector(el);\r\n        //console.log(this.el);\r\n        //把当前节点中的元素，获取到，放到内存\r\n\r\n        this.vm = vm;\r\n        let fragment = this.node2fragment(this.el);\r\n\r\n        //console.log(fragment);\r\n        //把节点中的内容进行替换\r\n\r\n        //编译模板 用数据编译\r\n        this.compile(fragment);\r\n\r\n        //把内容塞到页面\r\n        this.el.appendChild(fragment);\r\n    }\r\n    //判断是否v-开头\r\n    isDirective(attrName) {\r\n        return attrName.startsWith('v-');\r\n    }\r\n    /**\r\n     * 编译元素\r\n     * @param {*} node \r\n     */\r\n    compileElement(node) {\r\n        //拿到当前的属性\r\n        let attributes = node.attributes;\r\n        //console.log(attributes);\r\n        [...attributes].forEach(attr => {\r\n            //type=\"text\" v-model=\"school.name\"\r\n            let { name, value: expr } = attr;//v-model=\"school.msg\"\r\n            //console.log(name,value);\r\n            if (this.isDirective(name)) {//v-model, v-html, v-bind,\r\n                //console.log(node,'element');\r\n                let [, directive] = name.split('-');//v-on:click\r\n                let [directiveName, eventName] = directive.split(':');\r\n                //需要调用不同指令来处理\r\n                CompileUtil[directiveName](node, expr, this.vm, eventName);\r\n            }\r\n\r\n        })\r\n    }\r\n    /**\r\n     * 编译文本\r\n     * @param {*} node \r\n     */\r\n    compileText(node) {\r\n        //判断当前文本节点内容是否包含{{xxxx}} {{aaaa}}\r\n        let content = node.textContent;\r\n        // console.log(content,'内容');\r\n        if (/\\{\\{(.+?)\\}\\}/g.test(content)) {\r\n            //console.log(content);//找到所有文本\r\n            //文本节点\r\n            CompileUtil['text'](node, content, this.vm);//{{a}},{{b}}\r\n\r\n        }\r\n    }\r\n    /**\r\n     * 核心编译方法\r\n     * @param {*} node \r\n     */\r\n    compile(node) {\r\n        let childNodes = node.childNodes;\r\n\r\n        [...childNodes].forEach(child => {\r\n            //console.log(child.nodeType);\r\n            if (this.isElementNode(child)) {\r\n                //编译元素\r\n                // console.log(child);\r\n                this.compileElement(child);\r\n                //如果是元素，需要把自己传进去，遍历子节点\r\n                this.compile(child);\r\n            } else {\r\n                //console.log(child);\r\n                //编译文本\r\n                this.compileText(child);\r\n            }\r\n        })\r\n    }\r\n    /**\r\n     * 把节点移动到内存中\r\n     * @param {*} node \r\n     * @returns \r\n     */\r\n    node2fragment(node) {\r\n        //创建一个文档碎片\r\n        let fragment = document.createDocumentFragment();\r\n\r\n        let firstChild;\r\n        while (firstChild = node.firstChild) {\r\n            //appendChild具有移动性\r\n            fragment.appendChild(firstChild);\r\n        }\r\n        return fragment;\r\n    }\r\n    /**\r\n     * 判断是否是input文本框\r\n     * @param {*} node \r\n     * @returns \r\n     */\r\n    isElementNode(node) {\r\n        //判断是否是input=1\r\n        return node.nodeType === 1;\r\n    }\r\n\r\n}\r\n\r\nexport { Compiler }\r\n","\r\n\r\n/**\r\n * 观察者（发布订阅），被观察者\r\n */\r\nexport default class Dep {\r\n    constructor() {\r\n        this.subs = [];//存放watcher\r\n    }\r\n    /**\r\n     * 订阅\r\n     * @param {*} watcher \r\n     */\r\n    addSub(watcher) {\r\n        //添加watcher\r\n        this.subs.push(watcher);\r\n    }\r\n    /**\r\n     * 发布，执行监控的所有对象的修改方法\r\n     */\r\n    notify() {\r\n        this.subs.forEach(watcher => watcher.update());\r\n    }\r\n}\r\nexport { Dep }","\r\nimport { Dep } from './Dep.js';\r\n\r\n//数据劫持\r\nexport default class Observer {\r\n    constructor(data) {\r\n        this.observer(data);\r\n    }\r\n    /**\r\n     * 数据劫持\r\n     * @param {*} data \r\n     */\r\n    observer(data) {\r\n        //如果是对象\r\n        if (data && typeof data == 'object') {\r\n            for (let key in data) {\r\n                this.defineReactive(data, key, data[key]);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 个每个属性，都加上一个发布订阅功能\r\n     * {school:{name:'mumu'}} school={}\r\n     * @param {*} obj \r\n     * @param {*} key \r\n     * @param {*} value \r\n     */\r\n    defineReactive(obj, key, value) {\r\n        //数据劫持\r\n        this.observer(value);//school:[watcher,watcher] b:[watcher]\r\n        let dep = new Dep()//个每个属性，都加上一个发布订阅功能\r\n        Object.defineProperty(obj, key, {\r\n            get() {\r\n                //创建watcher时，回去到对应的内容，并且把watcher放到全局上\r\n                //添加订阅\r\n                Dep.target && dep.addSub(Dep.target);\r\n                return value;\r\n            },\r\n            set: (newVal) => {\r\n                //{school:{name:'mumu'}} school={}\r\n                //新旧数据不一样修改数据，通知发布\r\n                if (newVal != value) {\r\n                    this.observer(newVal);\r\n                    value = newVal;\r\n                    dep.notify();\r\n                }\r\n            }\r\n        })\r\n    }\r\n}\r\nexport { Observer } ","/*\r\ncompile：编译模板，编译元素三个步骤：\r\n1. 先把真实DOM放入内存中 fragment；\r\n2.编译 => 提取元素节点含有v- v-model 文本节点{{}}；\r\n3. 把编译好的fragment 放入页面\r\nobserver：数据劫持，其主要使用ES5中的Object.defineProperty(vue3.x中表示弃用Object.defineProperty使用更快的原生proxy) 去给对象的属性添加get和set\r\nwatcher：监听，监听数据的变化\r\n*/\r\n//基类 调度class QJS{}\r\n//基类 调度\r\nimport { Compiler } from './Compiler.js';\r\nimport { Observer } from './Observer.js';\r\n\r\nexport default class Qvm {\r\n    constructor(options) {\r\n        this.$el = options.el;\r\n        this.$data = options.data;\r\n        let computed = options.computed;\r\n        let methods = options.methods;\r\n        //这个根元素 存在 编译模板\r\n        if (this.$el) {\r\n            //把数据全部转成Object.defineProperty来定义\r\n\r\n            //数据劫持\r\n            new Observer(this.$data);\r\n\r\n\r\n            //计算方法\r\n            //{{getNewName}} reduce vm.$data.getNewName\r\n            for (let key in computed) {//有依赖关系，数据\r\n                Object.defineProperty(this.$data, key, {\r\n                    get: () => {\r\n                        return computed[key].call(this);\r\n                    }\r\n                })\r\n            }\r\n\r\n            //所有普通事件方法\r\n            for (let key in methods) {\r\n                //方法用于在对象上定义一个新属性，或者修改对象现有属性，并返回此对象。\r\n                Object.defineProperty(this, key, {\r\n                    get() {\r\n                        //动态调用变量只能使用methods[key]\r\n                        return methods[key];\r\n                    }\r\n                })\r\n            }\r\n            //把数据获取操作，vm上的取值操作，都代理到vm.$data\r\n            this.proxyVm(this.$data);\r\n            //编译\r\n            new Compiler(this.$el, this);\r\n        }\r\n    }\r\n    /**\r\n     * 代理视图\r\n     * @param {*} data {school:{name,age}}\r\n     */\r\n    proxyVm(data) {\r\n        for (let key in data) {\r\n            //{school:{name,age}}\r\n            //方法用于在对象上定义一个新属性，或者修改对象现有属性，并返回此对象。\r\n            Object.defineProperty(this, key, {\r\n                get() {\r\n                    return data[key];\r\n                },\r\n                set(newValue) {//设置代理方法\r\n                    data[key] = newValue;\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\nexport { Qvm } ","\r\nimport { CompileUtil } from './CompileUtil.js';\r\nimport { Dep } from './Dep.js';\r\n\r\n/**\r\n * 监听，监听数据的变化\r\n */\r\nexport default class Watcher {\r\n    constructor(vm, expr, cb) {\r\n        this.vm = vm;\r\n        this.expr = expr;\r\n        this.cb = cb;\r\n        //默认现存一个旧值\r\n        this.oldValue = this.get();\r\n    }\r\n    /**\r\n     * 取值，把这个观察者和数据关联起来\r\n     * @returns \r\n     */\r\n    get() {\r\n        Dep.target = this;//先把自己放在this上\r\n        //vm.$data.school, vm.$data.school.name\r\n        //取值，把这个观察者和数据关联起来\r\n        let value = CompileUtil.getVal(this.vm, this.expr);\r\n        Dep.target = null;//不取消，任何值取值，都会添加watcher\r\n        return value;\r\n    }\r\n    /**\r\n     * 更新操作，数据变化后，会调用观察者的update方法\r\n     */\r\n    update() {\r\n        let newVal = CompileUtil.getVal(this.vm, this.expr);\r\n\r\n        //新旧数据不一样在数据劫持已经判断过了，修改页面数据\r\n        //TODO: 暂时修改为直接修改数据\r\n        this.cb(newVal);\r\n    }\r\n}\r\nexport { Watcher } ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {Qvm} from '../node_modules/qvm-mvvm/Qvm.js';\r\nexport { Qvm } "],"names":["Qvm"],"sourceRoot":""}